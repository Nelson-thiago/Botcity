bibliotecas pra poder executar:
pip install botcity-maestro-sdk
pip install botcity-web
pip install python-dateutil
pip install pandas
pip install matplotlib
pip install openpyxl
pip install webdriver-manager


pra corrigir um errinho que tá acusando lá:
# Função para gerar o gráfico de cotação
def gerar_grafico(df):
    plt.figure(figsize=(10,6))

    # Plotando as linhas com um estilo diferente para melhor visualização
    plt.plot(df['Data'], df['Cotacao_Compra'], label='Cotação Compra', color='blue', linestyle='-', linewidth=2)
    plt.plot(df['Data'], df['Cotacao_Venda'], label='Cotação Venda', color='green', linestyle='--', linewidth=2)
    
    plt.xlabel('Data')
    plt.ylabel('Cotação (R$)')
    plt.title('Histórico da Cotação do Dólar')

    # Definir o formato e o espaçamento das datas no eixo x
    locator = AutoDateLocator()  # Localizador automático para datas
    formatter = DateFormatter('%d/%m/%Y')  # Formatar a data no estilo desejado
    ax = plt.gca()  # Obtém o eixo atual
    ax.xaxis.set_major_locator(locator)  # Definir o localizador de datas
    ax.xaxis.set_major_formatter(formatter)  # Definir o formatador de datas

    plt.xticks(rotation=45, ha='right', fontsize=10)  # Rotaciona as datas para não sobrepor

    plt.legend()
    plt.grid(True)

    # Salvando o gráfico
    caminho_grafico = 'grafico_cotacao_dolar.png'
    plt.tight_layout()  # Ajusta automaticamente os espaçamentos para evitar cortes
    plt.savefig(caminho_grafico, format='png')
    plt.close()

    return caminho gráfico



Mudanças:
Uso de AutoDateLocator: Foi adicionado o AutoDateLocator para ajustar o espaçamento das datas automaticamente no gráfico.
Uso de DateFormatter: O DateFormatter foi usado para garantir que as datas sejam formatadas de acordo com o formato desejado (%d/%m/%Y).
Remoção de locator_params: O uso de plt.locator_params(axis='x', nbins=10) foi removido, já que não funciona com o tipo de dado que está no eixo x (datas).
